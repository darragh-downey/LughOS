# Reusable LughOS CI Workflow
# This workflow can be used by other projects that use LughOS

name: LughOS Reusable CI
on:
  workflow_call:
    inputs:
      architectures:
        required: false
        type: string
        default: '["x86", "arm", "riscv"]'
        description: 'JSON array of architectures to build'
      run-tests:
        required: false
        type: boolean
        default: true
        description: 'Whether to run tests'
      run-analysis:
        required: false
        type: boolean
        default: true
        description: 'Whether to run static analysis'

permissions:
  contents: read
  actions: read
  packages: read
  id-token: write

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-hit-toolchain: ${{ steps.cache-i686-elf-toolchain.outputs.cache-hit }}
      cache-hit-nng: ${{ steps.cache-nng-build.outputs.cache-hit }}
      architectures: ${{ inputs.architectures }}
    steps:
      - uses: actions/checkout@v4

      - name: Cache i686-elf toolchain
        id: cache-i686-elf-toolchain
        uses: actions/cache@v4
        with:
          path: i686-elf-tools-linux
          key: ${{ runner.os }}-i686-elf-tools-linux-7.1.0

      - name: Cache NNG build
        id: cache-nng-build
        uses: actions/cache@v4
        with:
          path: nng/build
          key: ${{ runner.os }}-nng-build-v1

      - name: Install i686-elf-gcc
        if: steps.cache-i686-elf-toolchain.outputs.cache-hit != 'true'
        run: |
          wget https://github.com/lordmilko/i686-elf-tools/releases/download/7.1.0/i686-elf-tools-linux.zip
          mkdir -p i686-elf-tools-linux
          unzip i686-elf-tools-linux.zip -d i686-elf-tools-linux
          chmod +x i686-elf-tools-linux/bin/*
          
      - name: Build and install NNG
        if: steps.cache-nng-build.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/nanomsg/nng.git
          cd nng
          mkdir build && cd build
          cmake -G "Unix Makefiles" ..
          make -j$(nproc)
          sudo make install
          sudo ldconfig

      - name: Upload toolchain artifacts
        uses: actions/upload-artifact@v4
        with:
          name: toolchain
          path: i686-elf-tools-linux

      - name: Upload NNG artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nng
          path: nng/build

  build:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        architecture: ${{ fromJSON(needs.setup.outputs.architectures) }}
    steps:
      - uses: actions/checkout@v4

      - name: Install common dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc g++ binutils nasm gcc-arm-none-eabi binutils-arm-none-eabi
          sudo apt-get install -y gcc-riscv64-linux-gnu binutils-riscv64-linux-gnu
          sudo apt-get install -y cmake make git qemu-system-i386 qemu-system-arm qemu-system-riscv64 unzip
          
          # Verify toolchains are available
          echo "Checking toolchain availability:"
          which i686-elf-gcc || echo "i686-elf-gcc will be installed from cached download"
          which arm-none-eabi-gcc || echo "arm-none-eabi-gcc not found"
          which riscv64-linux-gnu-gcc || echo "riscv64-linux-gnu-gcc not found"

      - name: Download toolchain
        uses: actions/download-artifact@v4
        with:
          name: toolchain
          path: i686-elf-tools-linux

      - name: Download NNG
        uses: actions/download-artifact@v4
        with:
          name: nng
          path: nng/build

      - name: Debug extracted files
        run: |
          echo "Current directory structure:"
          ls -la
          echo "Checking if i686-elf-tools-linux directory exists:"
          [ -d "i686-elf-tools-linux" ] && echo "Directory exists" || echo "Directory does not exist"
          if [ -d "i686-elf-tools-linux/bin" ]; then
            echo "bin directory content:"
            ls -la i686-elf-tools-linux/bin
          else 
            echo "bin directory doesn't exist"
            find . -type f -name "i686-elf-gcc" | head -n 5
          fi

      - name: Set up toolchain
        run: |
          chmod +x i686-elf-tools-linux/bin/* || echo "Failed to chmod, checking if binaries exist"
          echo "Toolchain directory contents:"
          ls -la i686-elf-tools-linux/bin || echo "Unable to list bin directory"
          export PATH="${{ github.workspace }}/i686-elf-tools-linux/bin:$PATH"
          which i686-elf-gcc || echo "i686-elf-gcc not found in PATH"

      - name: Build for ${{ matrix.architecture }}
        run: |
          export PATH="${{ github.workspace }}/i686-elf-tools-linux/bin:$PATH"
          make ${{ matrix.architecture }}

      - name: Run tests for ${{ matrix.architecture }}
        if: inputs.run-tests && matrix.architecture == 'x86'
        run: |
          export PATH="${{ github.workspace }}/i686-elf-tools-linux/bin:$PATH"
          chmod +x ./scripts/run_tests.sh
          ./scripts/run_tests.sh
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lughos-${{ matrix.architecture }}-build
          path: |
            build/${{ matrix.architecture }}

  analysis:
    if: inputs.run-analysis
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cppcheck clang-tidy xsltproc
          
      - name: Run static analysis with clang-tidy (CERT C)
        run: |
          mkdir -p reports
          clang-tidy "-checks=cert-*,clang-analyzer-security.*,clang-analyzer-core.*" \
            kernel/*.c kernel/*/*.c kernel/*/*/*.c services/*/*.c \
            -export-fixes=reports/clang-tidy-fixes.yaml \
            -- -Iinclude || true

      - name: Run static analysis with Cppcheck
        run: |
          mkdir -p reports
          cppcheck --enable=all --suppress=missingIncludeSystem \
            --xml --xml-version=2 \
            -Iinclude \
            kernel/*.c kernel/*/*.c kernel/*/*/*.c \
            services/scheduler/*.c services/storage/*.c services/update/*.c \
            2> reports/cppcheck-report.xml

      - name: Generate HTML report from Cppcheck XML
        run: |
          xsltproc --stringparam title "LughOS Cppcheck Report" \
            /usr/share/cppcheck/cppcheck-htmlreport.xslt \
            reports/cppcheck-report.xml > reports/cppcheck-report.html

      - name: Upload analysis reports
        uses: actions/upload-artifact@v4
        with:
          name: static-analysis-reports
          path: reports/

  test:
    if: inputs.run-tests
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Install test dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-system-i386 qemu-system-arm qemu-system-riscv64
          
      - name: Setup directory structure
        run: |
          mkdir -p build/x86
          mkdir -p build/arm
          mkdir -p build/riscv
          cp -R artifacts/lughos-x86-build/* build/x86/ || true
          cp -R artifacts/lughos-arm-build/* build/arm/ || true
          cp -R artifacts/lughos-riscv-build/* build/riscv/ || true

      - name: Generate test report
        run: |
          mkdir -p test-logs
          echo "# LughOS Test Results" > test-logs/test-summary.md
          echo "## Build Status" >> test-logs/test-summary.md
          
          # List all built architectures
          echo "### Architectures built:" >> test-logs/test-summary.md
          for arch in x86 arm riscv; do
            if [ -d "build/${arch}" ] && [ -f "build/${arch}/lughos.bin" ]; then
              echo "- ✅ ${arch}" >> test-logs/test-summary.md
            else
              echo "- ❌ ${arch}" >> test-logs/test-summary.md
            fi
          done
          
          # Run tests if possible for each architecture
          for arch in x86 arm riscv; do
            if [ -f "build/${arch}/lughos.bin" ]; then
              echo "Running tests for ${arch}..."
              chmod +x ./scripts/run_unit_tests.sh
              ./scripts/run_unit_tests.sh ${arch} || true
              
              # Add test report to summary if it exists
              if [ -f "test-logs/unit_test_report_${arch}.md" ]; then
                echo "" >> test-logs/test-summary.md
                echo "## ${arch} Test Results" >> test-logs/test-summary.md
                cat test-logs/unit_test_report_${arch}.md >> test-logs/test-summary.md
              fi
            fi
          done

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: test-logs/
